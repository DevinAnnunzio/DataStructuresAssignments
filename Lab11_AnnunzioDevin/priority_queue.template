
#include <iostream>
#include <cassert>


template <typename T>
priority_queue<T>::priority_queue() {
    // postcondition: empty priority_queue has been created
}

template <typename T>
void priority_queue<T>::pop() {
    // precondition: priority_queue is not emtpy
    assert(!empty());
    // postcondition: highest priority item has been removed
    h.remove();
}

template <typename T>
void priority_queue<T>::push (const T& item) {
    // postcondition: item has been inserted
    h.insert(item);
}

template <typename T>
bool priority_queue<T>::empty () const {
    // postcondition: returned whether priority queue is empty
    return h.is_empty();
}

template <typename T>
size_t priority_queue<T>::size() const {
    // postcondition: returned number of items in the priority queue
    return h.size();
}

template <typename T>
T priority_queue<T>::top() const {
    // precondition: priority queue is not empty
    assert(!empty());
    // postcondition: copy of highest priority item has been returned
    return h.max();
}